variables:
  buildNumber: $[ counter('constant', 13000) ] # Start higher than our AppVeyor versions. Every build (pr or branch) will increment.

name: 2.0.$(buildNumber)
  
pr:
  branches:
    include:
    - devops_experiment

trigger:
  branches:
    include:
    - devops_experiment

jobs:
- job: InitializePipeline
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Initialize'
    name: Initialize
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\initialize-pipeline.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''

- job: BuildArtifacts
  dependsOn: InitializePipeline
  variables:
    ${{ if or( eq( variables['Build.Reason'], 'PullRequest' ), not( endswith( variables['Build.SourceBranch'], 'release/3.0' ) ) ) }}:
      suffixTemp: ci
      packSuffixSwitchTemp: --version-suffix ci
      emgSuffixSwitchTemp: --version-suffix ci$(buildNumber)
    suffix: $[variables.suffixTemp] # this resolves to an empty string if it is missing
    packSuffixSwitch: $[variables.packSuffixSwitchTemp]
    emgSuffixSwitch: $[variables.emgSuffixSwitchTemp]
  pool:
    vmImage: 'vs2017-win2016' 
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.x'
      performMultiLevelLookup: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'
  - task: UseNode@1
    inputs:
      version: '10.0.0'
  - task: PowerShell@2
    displayName: "Build artifacts"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build.ps1'
      arguments: '-buildNumber "$(buildNumber)"'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\buildoutput'
      Contents: |
        '*.zip'
        '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: artifacts

- job: RunUnitTests
  pool:
    vmImage: 'vs2017-win2016'
  steps: 
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.x'
      performMultiLevelLookup: true
  - task: DotNetCoreCLI@2
    displayName: 'Unit Tests'
    inputs:
      command: 'test'
      testRunTitle: 'Unit Tests'
      arguments: '-v n'
      projects: |
        **\ExtensionsMetadataGeneratorTests.csproj
        **\WebJobs.Script.Scaling.Tests.csproj
        **\WebJobs.Script.Tests.csproj

- job: RunNonE2EIntegrationTests
  pool:
    vmImage: 'vs2017-win2016'
  steps: 
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.x'
      performMultiLevelLookup: true
  - task: UseNode@1
    inputs:      
      version: '10.x'
  - task: PowerShell@2
    displayName: 'Install Az.Storage Powershell module'
    inputs:
      targetType: 'inline'
      script: 'Install-Module -Name Az.Storage -RequiredVersion 1.11.0 -Scope CurrentUser -Force -AllowClobber'
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Checkout secrets'
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\checkout-secrets.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: azure-functions-host-$(LeaseBlob)
      secretsFilter: '*'
  - task: DotNetCoreCLI@2
    displayName: 'Non-E2E integration tests'
    inputs:
      command: 'test'
      testRunTitle: 'Non-E2E integration tests'
      arguments: '--filter "Category!=E2E"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
    env:
      AzureWebJobsStorage: $(Storage)
      ConnectionStrings__CosmosDB: $(CosmosDB)
      AzureWebJobsEventHubSender: $(EventHub)
      AzureWebJobsEventHubReceiver: $(EventHub)
      AzureWebJobsSecretStorageKeyVaultConnectionString: $(KeyVaultConnectionString)
      AzureWebJobsSecretStorageKeyVaultName: $(KeyVaultName)
  - task: PowerShell@2
    condition: always()
    displayName: 'Checkin secrets'
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\checkin-secrets.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'' -leaseBlob $(LeaseBlob) -leaseToken $(LeaseToken)'

- job: RunIntegrationTests
  pool:
    vmImage: 'vs2017-win2016'
  steps: 
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.x'
      performMultiLevelLookup: true
  - task: UseNode@1
    inputs:
      version: '10.x'
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7.x'
      addToPath: true
  - task: PowerShell@2
    displayName: 'Install Az.Storage Powershell module'
    inputs:
      targetType: 'inline'
      script: 'Install-Module -Name Az.Storage -RequiredVersion 1.11.0 -Scope CurrentUser -Force -AllowClobber'
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Checkout secrets'
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\checkout-secrets.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: azure-functions-host-$(LeaseBlob)
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Set environment variables'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "##vso[task.setvariable variable=AzureWebJobsStorage]$env:AzureWebJobsStorageSecretMap"
        Write-Host "##vso[task.setvariable variable=ConnectionStrings__CosmosDB]$env:CosmosDbSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubSender]$env:AzureWebJobsEventHubSenderSecretMap"
        Write-Host "##vso[task.setvariable variable=AzureWebJobsEventHubReceiver]$env:AzureWebJobsEventHubReceiverSecretMap"
    env:
      AzureWebJobsStorageSecretMap: $(Storage)
      CosmosDbSecretMap: $(CosmosDb)
      AzureWebJobsEventHubSenderSecretMap: $(EventHub)
      AzureWebJobsEventHubReceiverSecretMap: $(EventHub)
  - task: DotNetCoreCLI@2
    displayName: "C# end to end tests"
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "C# end to end tests"
      arguments: '--filter "Group=CSharpEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Node end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Node end to end tests"
      arguments: '--filter "Group=NodeEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Direct load end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Direct load end to end tests"
      arguments: '--filter "Group=DirectLoadEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "F# end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "F# end to end tests"
      arguments: '--filter "Group=FSharpEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Language worker end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Language worker end to end tests"
      arguments: '--filter "Group=LanguageWorkerSelectionEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Node script host end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Node script host end to end tests"
      arguments: '--filter "Group=NodeScriptHostTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Raw assembly end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Raw assembly end to end tests"
      arguments: '--filter "Group=RawAssemblyEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj                        
  - task: DotNetCoreCLI@2
    displayName: "Samples end to end tests"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Samples end to end tests"
      arguments: '--filter "Group=SamplesEndToEndTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Standby mode end to end tests Windows"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Standby mode end to end tests Windows"
      arguments: '--filter "Group=StandbyModeEndToEndTests_Windows"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Standby mode end to end tests Linux"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Standby mode end to end tests Linux"
      arguments: '--filter "Group=StandbyModeEndToEndTests_Linux"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: DotNetCoreCLI@2
    displayName: "Linux container end to end tests Windows"    
    condition: succeededOrFailed()
    inputs:
      command: 'test'
      testRunTitle: "Linux container end to end tests Windows"
      arguments: '--filter "Group=ContainerInstanceTests"'
      projects: |
        **\WebJobs.Script.Tests.Integration.csproj
  - task: PowerShell@2
    condition: always()
    displayName: 'Checkin secrets'
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\checkin-secrets.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'' -leaseBlob $(LeaseBlob) -leaseToken $(LeaseToken)'