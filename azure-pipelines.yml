variables:
  buildNumber: $[ counter('constant', 13000) ] # Start higher than our AppVeyor versions. Every build (pr or branch) will increment.
  integrationTestsBuild: $($env:RUNBUILDFORINTEGRATIONTESTS)
  
name: 3.0.$(buildNumber)
  
pr:
  branches:
    include:
    - dev
    - release/3.0
    - release/ExtensionsMetadataGenerator/1.1

trigger:
  branches:
    include:
    - dev
    - release/3.0
    - release/ExtensionsMetadataGenerator/1.1

jobs:
- job: InitializePipeline
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: AzureKeyVault@1
    inputs:
      # Note: This is actually a Service Connection in DevOps, not an Azure subscription name
      azureSubscription: 'Azure-Functions-Host-CI'
      keyVaultName: 'azure-functions-host-ci'
      secretsFilter: '*'
  - task: PowerShell@2
    displayName: 'Initialize'
    name: Initialize
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\initialize-pipeline.ps1'
      arguments: '-connectionString ''$(Storage-azurefunctionshostci0)'''

- job: BuildArtifacts
  dependsOn: InitializePipeline
  condition: and(succeeded(), or(ne(variables['Build.Reason'], 'PullRequest'), eq(dependencies.InitializePipeline.outputs['Initialize.BuildArtifacts'], true)))
  variables:
    ${{ if or( eq( variables['Build.Reason'], 'PullRequest' ), and( not( endswith( variables['Build.SourceBranch'], 'release/3.0' ) ), not( endswith( variables['Build.SourceBranch'], 'release/ExtensionsMetadataGenerator/1.1' ) ) ) ) }}:
      suffixTemp: ci
      packSuffixSwitchTemp: --version-suffix ci
      emgSuffixSwitchTemp: --version-suffix ci$(buildNumber)
      artifactSuffix: -ci
    suffix: $[variables.suffixTemp] # this resolves to an empty string if it is missing
    packSuffixSwitch: $[variables.packSuffixSwitchTemp]
    emgSuffixSwitch: $[variables.emgSuffixSwitchTemp]
  pool:
    vmImage: 'windows-2019' 
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '3.1.x'
      performMultiLevelLookup: true

  - task: PowerShell@2
    displayName: "Build artifacts"
    inputs:
      filePath: '$(Build.Repository.LocalPath)\build\build-extensions.ps1'
      arguments: '-buildNumber "$(buildNumber)" -suffix "$(suffix)" -commitHash "$(Build.SourceVersion)" -integrationTestsBuild:$integrationTestsBuild'
  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.Repository.LocalPath)\buildoutput'
      Contents: '*.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: DotNetCoreCLI@2
    displayName: 'Build host packages'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: -o packages -p:BuildNumber=$(buildNumber) -p:CommitHash=$(Build.SourceVersion) -c Release $(packSuffixSwitch)
      projects: |
        **\WebJobs.Script.csproj
        **\WebJobs.Script.WebHost.csproj
        **\WebJobs.Script.Grpc.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Build performance package'
    inputs:
      command: 'custom'
      custom: 'pack'
      arguments: '-o packages\WebJobs.Script.Performance.App'
      projects: |
        **\WebJobs.Script.Performance.App.csproj
  - task: DotNetCoreCLI@2
    displayName: 'Build Abstractions and ExtensionsMetadataGenerator'
    inputs:
      command: 'build'
      arguments: '-c Release -p:CommitHash=$(Build.SourceVersion)'
      projects: |
        **\ExtensionsMetadataGenerator.csproj
        **\WebJobs.Script.Abstractions.csproj

  - pwsh: |
      $sourcePath  = (ls $(Build.Repository.LocalPath)/packages/Microsoft.Azure.WebJobs.Script.WebHost*.nupkg).FullName
      if (-not (test-path $sourcePath))
      {
        throw 'Unable to find Microsoft.Azure.WebJobs.Script.WebHost*.nupkg at ./package'
      }
      Copy-Item -Path $sourcePath -Destination $(Build.ArtifactStagingDirectory) -ErrorAction Stop -Verbose -Force
    condition: eq(variables['integrationTestsBuild'], 'True')
    displayName: 'Copy package to ArtifactStagingDirectory'

  - task: NuGetCommand@2
    condition: eq(variables['integrationTestsBuild'], 'True')
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'e6a70c92-4128-439f-8012-382fe78d6396/f37f760c-aebd-443e-9714-ce725cd427df'
      allowPackageConflicts: true
  
